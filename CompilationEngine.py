############################################################################
# Effects the actual compilation output. Gets its input from a JackTokenizer
# and emits its parsed structure into an output file/stream. The output is
# generated by a series of compilexxx()routines, one for every syntactic
# element xxx of the Jack grammar. The contract between these routines is that
# each compilexxx() routine should read the syntactic construct xxx from the
# input, advance() the tokenizer exactly beyond xxx, and output the parsing of
# xxx. Thus, compilexxx()may only be called if indeed xxx is the next syntactic
# element of the input. In the first version of the compiler, described in
# Chapter 10, this module emits a structured printout of the code, wrapped in
# XML tags. In the final version of the compiler, described in Chapter 11,
# this module generates executable VM code. In both cases, the parsing logic
# and module API are exactly the same
##############################################################################

class CompilationEngine:
    def __init__(self, in_file, out_file):
        """
        Creates a new compilation engine with the given input and output.
        The next routine called must be compileClass().
        :param in_file: The source Jack file.
        :param out_file: Compiled Jack file.
        """
        pass

    #################
    # PUBLIC METHODS
    #################

    def compileClass(self):
        """
        Compiles a complete class.
        """
        pass

    def CompileClassVarDec(self):
        """
        Compiles a static declaration or a field declaration.
        """
        pass

    def CompileSubroutine(self):
        """
        Compiles a complete method, function, or constructor.
        """
        pass

    def compileParameterList(self):
        """
        Compiles a (possibly empty) parameter list, not including the
        enclosing “()”.
        """
        pass

    def compileVarDec(self):
        """
        Compiles a var declaration.
        """
        pass

    def compileStatements(self):
        """
        Compiles a sequence of statements, not including the enclosing “{}”.
        """
        pass

    def compileDo(self):
        """
        Compiles a do statement.
        """
        pass

    def compileLet(self):
        """
        Compiles a let statement.
        """
        pass

    def compileWhile(self):
        """
        Compiles a while statement.
        """
        pass

    def compileReturn(self):
        """
        Compiles a return statement.
        """
        pass

    def compileIf(self):
        """
        Compiles an if statement, possibly with a trailing else clause.
        """
        pass

