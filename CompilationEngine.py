############################################################################
# Effects the actual compilation output. Gets its input from a JackTokenizer
# and emits its parsed structure into an output file/stream. The output is
# generated by a series of compilexxx()routines, one for every syntactic
# element xxx of the Jack grammar. The contract between these routines is that
# each compilexxx() routine should read the syntactic construct xxx from the
# input, advance() the tokenizer exactly beyond xxx, and output the parsing of
# xxx. Thus, compilexxx()may only be called if indeed xxx is the next syntactic
# element of the input. In the first version of the compiler, described in
# Chapter 10, this module emits a structured printout of the code, wrapped in
# XML tags. In the final version of the compiler, described in Chapter 11,
# this module generates executable VM code. In both cases, the parsing logic
# and module API are exactly the same
##############################################################################
from JackTokenizer import *
from SymbolTable import *
from VMWriter import *

XML_DELIM_TERMINAL = " "
XML_INDENT_CHAR = "  "
TOKEN_TYPE_CLASS_NAME = TOKEN_TYPE_IDENTIFIER
TOKEN_TYPE_SUBROUTINE_NAME = TOKEN_TYPE_IDENTIFIER
TOKEN_TYPE_VAR_NAME = TOKEN_TYPE_IDENTIFIER
UNIQUE_DELIMITER = "_"
LABEL_1 = "LABEL1"
LABEL_2 = "LABEL2"

# Identifiers
STATUS_DEFINED = "definition"
STATUS_USED = "usage"
CATEGORY_VAR = KIND_VAR
CATEGORY_ARG = KIND_ARG
CATEGORY_STATIC = KIND_STATIC
CATEGORY_FIELD = KIND_FIELD
CATEGORY_CLASS = RE_CLASS
CATEGORY_SUBROUTINE = "subroutine"
INDEX_NONE = -1

class CompilationEngine:
    ###############
    # CONSTRUCTOR #
    ###############

    def __init__(self, in_filename, in_file, out_xml, out_vm):
        """
        Creates a new compilation engine with the given input and output.
        The next routine called must be compileClass().
        :param in_file: Open source Jack file.
        :param out_xml: Open XML file.
        :param out_vm: Open VM file.
        """
        self.__in_filename = in_filename
        self.__in_file, self.__out_xml = in_file, out_xml
        self.__tokenizer = JackTokenizer(in_file)
        self.__symbolTable = SymbolTable()
        self.__vmWriter = VMWriter(in_filename, out_vm)
        self.__stack = list()
        self.__tokenizer.advance()
        self.__unique_id = 0

    ###################
    # PRIVATE METHODS #
    ###################
    def __uniqueLabel(self, label):
        """
        Adds a unique id to the given label to prevent collisions with other
        labels carrying the same name.
        Example:
            __uniqueLabel("TRUE") --> "TRUE_1"
        :param label: label to localize
        :return: Given label with a unique identifier.
        """
        unique_label = "{}{}{}".format(label, UNIQUE_DELIMITER,
                                       self.__unique_id)
        self.__unique_id += 1
        return unique_label


    def __writeToken(self, token, token_type):
        """
        Writes the given token as an xml tag to the output.
        :param token:
        :param token_type:
        :return:
        """
        tag = self.__getIndentedTag("<{0}>{1}{2}{1}</{0}>\n"
                                    .format(token_type,
                                            XML_DELIM_TERMINAL,
                                            token))
        self.__out_xml.write(tag)


    def __writeTokenAndAdvance(self, token, token_type):
        """
        Writes the given token as an xml tag to the output and extracts the
        next token from the code.
        :param token: token tag value
        :param token_type: token tag type
        """
        # Build XML tag
        self.__writeToken(token, token_type)
        self.__tokenizer.advance()

    def __getIndentedTag(self, tag):
        """
        Return the given tag with trailing tabs according to current
        indentation level.
        :param tag: tag to indent
        :return: tag indented with trailing tabs.
        """
        return XML_INDENT_CHAR * len(self.__stack) + tag

    def __openTag(self, tagName):
        """
        Open an XML tag with the given name.
        All following tags will be written as inner tags until __closeTag()
        is called.
        :param tagName: name of the tag to open
        """
        tag = self.__getIndentedTag("<{}>\n".format(tagName))
        self.__out_xml.write(tag)
        self.__stack.append(tagName)

    def __closeTag(self):
        """
        Close the current open XML tag.
        All following tags will be written as outer tags in the previous
        indentation level.
        """
        tagName = self.__stack.pop()
        tag = self.__getIndentedTag("</{}>\n".format(tagName))
        self.__out_xml.write(tag)

    def __compileKeyWord(self):
        """
        Compile a keyword token
        """
        keyword = self.__tokenizer.keyWord()
        self.__writeTokenAndAdvance(keyword, TOKEN_TYPE_KEYWORD)
        return keyword

    def __compileSymbol(self):
        """
        Compile a symbol token
        """
        symbol = self.__tokenizer.symbol()
        self.__writeTokenAndAdvance(symbol, TOKEN_TYPE_SYMBOL)
        return symbol

    def __compileIdentifier(self, category, status, kind=KIND_NONE,
                            index=INDEX_NONE):
        """
        Compile an identifier token
        """

        info = "{} {}".format(category, status)
        if kind != KIND_NONE:
            info += " " + kind
        if index != INDEX_NONE:
            info += " " + index
        info = "[{}] ".format(info)
        identifier = self.__tokenizer.identifier()
        self.__writeTokenAndAdvance(info + identifier, TOKEN_TYPE_IDENTIFIER)
        return identifier

    def __compileIntVal(self):
        """
        Compile an intVal token
        """
        intval = self.__tokenizer.intVal()
        self.__writeTokenAndAdvance(intval, TOKEN_TYPE_INTEGER)
        self.__vmWriter.writePush(SEGMENT_CONSTANT, intval)
        return intval

    def __compileStringVal(self):
        """
        Compile a stringVal token
        """
        string = self.__tokenizer.stringVal()
        self.__writeTokenAndAdvance(string, TOKEN_TYPE_STRING)
        # RazK: TODO: Don't escape the '\' character! resolve somehow
        for char in string:
            self.__vmWriter.writePush(SEGMENT_CONSTANT, ord(char))
        return string

    def __compileClassName(self):
        """
        Compiles a variable name.
        """
        return self.__compileIdentifier(CATEGORY_CLASS,STATUS_DEFINED)

    def __compileSubroutineName(self, status):
        """
        Compiles a variable name.
        """
        return self.__compileIdentifier(CATEGORY_SUBROUTINE, status)

    def __compileSubroutineCall(self):
        """
        Compiles a subroutine call.
        Syntax:
        ( className | varName) '.' subroutineName '(' expressionList ')' |
        subroutineName '(' expressionList ')'
        """
        # Compile XML
        name = ""
        if self.__tokenizer.lookahead() == RE_DOT:      # className | varName
            # extract var\class name
            name = self.__tokenizer.peek()
            # className or varName?
            kind = self.__symbolTable.kindOf(name)
            if (kind != KIND_NONE):                     # varName
                # Use class name instead of object name
                name = self.__symbolTable.typeOf(name)
                # Push variable (this) and call class method
                index = self.__symbolTable.indexOf()
                segment = kind
                self.__vmWriter.writePush(segment, index)
                self.__compileIdentifier(kind, STATUS_USED, kind, index)
            else:                                       # className
                self.__compileIdentifier(CATEGORY_CLASS, STATUS_USED)
            name += self.__compileSymbol()              # '.'
                                                        # subroutineName
        name += self.__compileSubroutineName(STATUS_USED)
        self.__compileSymbol()                          # '('
        exp_count = self.CompileExpressionList()        # expressionList
        self.__compileSymbol()                          # ')'

        # Compile VM
        self.__vmWriter.writeCall(name, exp_count)

    def __compileVarName(self):
        """
        Compiles a variable name.
        """
        varName = self.__compileIdentifier()
        return varName

    def __compileType(self):
        """
        Compiles a type.
        Syntax:
        'int' | 'char' | 'boolean' | className
        """
        # 'int' | 'char' | 'boolean'
        if self.__tokenizer.peek() in {RE_INT, RE_CHAR, RE_BOOLEAN}:
            type = self.__compileKeyWord()
        # className
        else:
            type = self.__compileClassName()
        return type

    def __compileSubroutineBody(self, name):
        """
        Compiles a subroutine body.
        Syntax:
        '{' varDec* statements '}'
        """
        self.__openTag('subroutineBody')    # <subroutineBody>
        self.__compileSymbol()              #   '{'

        vars = 0
        # varDec*
        while self.__tokenizer.peek() == RE_VAR:
            self.compileVarDec()            #   varDec*
            vars += 1
        self.__vmWriter.writeFunction(name, vars)
        self.compileStatements()            #   statements
        self.__compileSymbol()              #   '}'
        self.__closeTag()                   # </subroutineBody>
        return vars

    ##################
    # PUBLIC METHODS #
    ##################

    def compileClass(self):
        """
        Compiles a complete class.
        Syntax:
        'class' className '{' classVarDec* subroutineDec* '}'
        """
        self.__openTag('class')     # <class>
        self.__compileKeyWord()     #   'class'
        self.__compileClassName()   #   className
        self.__compileSymbol()      #   '{'

        # classVarDec*
        while self.__tokenizer.peek() in {RE_STATIC, RE_FIELD}:
            self.CompileClassVarDec()

        # subroutineDec*
        while self.__tokenizer.peek() in {RE_CONSTRUCTOR, RE_FUNCTION,
                                          RE_METHOD}:
            self.CompileSubroutine()

        self.__compileSymbol()      #   '}'
        self.__closeTag()           # </class>

    def CompileClassVarDec(self):
        """
        Compiles a static declaration or a field declaration.
        Syntax:
        ('static' | 'field') type varName (',' varName)* ';'
        """
        self.__openTag('classVarDec')       # <classVarDec>
        kind = self.__compileKeyWord()      #   ('static' | 'field')
        type = self.__compileType()         #   type
        name = self.__compileVarName()      #   varName
        self.__symbolTable.define(name, type, kind)
        # (',' varName)
        while self.__tokenizer.peek() == RE_COMMA:
            self.__compileSymbol()          #   ','
            name = self.__compileVarName()  #   varName
            self.__symbolTable.define(name, type, kind)

        self.__compileSymbol()              #   ';'
        self.__closeTag()                   # </classVarDec>

    def CompileSubroutine(self):
        """
        Compiles a complete method, function, or constructor.
        Syntax:
        ('constructor' | 'function' | 'method') ('void' | type)
        subroutineName '(' parameterList ')' subroutineBody
        """
        # Start subroutine in symbol table
        self.__symbolTable.startSubroutine()

        # Compile XML
        self.__openTag('subroutineDec')         # <subroutineDec>
        keyword = self.__compileKeyWord()       #   ('constructor' |
                                                #   'function' | 'method')
        if self.__tokenizer.peek() == RE_VOID:
            type = self.__compileKeyWord()      #   'void'
        else:
            type = self.__compileType()         #   type
        name = self.__compileSubroutineName(    #   soubroutineName
            STATUS_DEFINED)
        self.__compileSymbol()                  #   '('
        self.compileParameterList()             #   parameterList
        self.__compileSymbol()                  #   ')'
        self.__compileSubroutineBody(name)      #   subroutineBody

        # Compile VM
        self.__vmWriter.writeReturn(type)

        self.__closeTag()                       # </subroutineDec>

    def compileParameterList(self):
        """
        Compiles a (possibly empty) parameter list, not including the
        enclosing "()".
        Syntax:
        ( (type varName) (',' type varName)*)?
        """
        parameters = 0                          # no parameters?
        self.__openTag('parameterList')         # <parameterList>
        if self.__tokenizer.peek() != RE_BRACKETS_RIGHT:
            parameters += 1                     # yes parameters!
            type = self.__compileType()         #   type
            name = self.__compileVarName()      #   varName
            self.__symbolTable.define(name, type, KIND_ARG)
            while self.__tokenizer.peek() == RE_COMMA:
                self.__compileSymbol()          #   ','
                type = self.__compileType()     #   type
                name = self.__compileVarName()  #   varName
                self.__symbolTable.define(name, type, KIND_ARG)
                parameters += 1                 # more parameters :-O
        self.__closeTag()                       # </parametersList>
        return parameters

    def compileVarDec(self):
        """
        Compiles a var declaration.
        Syntax:
        'var' type varName (',' varName)* ';'
        """
        self.__openTag('varDec')            # <varDec>
        self.__compileKeyWord()             #   'var'
        type = self.__compileType()         #   type
        name = self.__compileVarName()      #   varName
        self.__symbolTable.define(name, type, KIND_VAR)
        while self.__tokenizer.peek() == RE_COMMA:
            self.__compileSymbol()          #   ','
            name = self.__compileVarName()  #   varName
            self.__symbolTable.define(name, type, KIND_VAR)
        self.__compileSymbol()              #   ';'
        self.__closeTag()                   # </varDec>

    def compileStatements(self):
        """
        Compiles a sequence of statements, not including the enclosing "{}".
        Syntax:
        statement*
        where statement is in:
        letStatement | ifStatement | whileStatement | doStatement | returnStatement
        """
        self.__openTag('statements')    # <statements>
        statement = self.__tokenizer.peek()
        while statement in {RE_LET, RE_IF, RE_WHILE, RE_DO, RE_RETURN_NOTHING,
                            RE_RETURN_SOMETHING}:
            if statement == RE_LET:
                self.compileLet()
            elif statement == RE_IF:
                self.compileIf()
            elif statement == RE_WHILE:
                self.compileWhile()
            elif statement == RE_DO:
                self.compileDo()
            elif statement == RE_RETURN_NOTHING:
                self.compileReturnNothing()
            elif statement == RE_RETURN_SOMETHING:
                self.compileReturnSomething()
            statement = self.__tokenizer.peek()
        self.__closeTag()               # </statements>

    def compileDo(self):
        """
        Compiles a do statement.
        Syntax:
        'do' subroutineCall ';'
        """
        self.__openTag('doStatement')   # <doStatement>
        self.__compileKeyWord()         #   'do'
        self.__compileSubroutineCall()  #   subroutineCall
        self.__compileSymbol()          #   ';'
        self.__closeTag()               # </doStatement>

    def compileLet(self):
        """
        Compiles a let statement.
        Syntax:
        'let' varName ('[' expression ']')? '=' expression ';'
        """
        self.__openTag('letStatement')      # <letStatement>
        self.__compileKeyWord()             #   'let'
        varName = self.__compileVarName()   #   varName
        if self.__tokenizer.peek() == RE_BRACKETS_SQUARE_LEFT:
            self.__compileSymbol()          #   '['
            self.CompileExpression()        # expression
            self.__compileSymbol()          #   ']'
        self.__compileSymbol()              #   '='
        self.CompileExpression()            # expression
        self.__compileSymbol()              #   ';'
        self.__closeTag()                   # </letStatement>

        # Compile assignment to varName
        segment = self.__symbolTable.segmentOf(varName)
        # Compile only if the varName was defined
        # (unlike class name of subroutine name)
        if segment != KIND_NONE:  # varName was defined
            index = self.__symbolTable.indexOf(varName)
            self.__vmWriter.writePop(segment, index)


    def compileWhile(self):
        """
        Compiles a while statement.
        Syntax:
        'while' '(' expression ')' '{' statements '}'
        """
        L1 = self.__uniqueLabel(LABEL_1)
        L2 = self.__uniqueLabel(LABEL_2)

        self.__openTag('whileStatement')    # <whileStatement>
        self.__compileKeyWord()             #   'while'
        self.__vmWriter.writeLabel(L1)      # label L1
        self.__compileSymbol()              #   '('
        self.CompileExpression()            #   expression
        self.__compileSymbol()              #   ')'
        self.__vmWriter.writeIf(L2)         # if-goto L2
        self.__compileSymbol()              #   '{'
        self.compileStatements()            #   statements
        self.__compileSymbol()              #   '}'
        self.__vmWriter.writeGoto(L1)       # goto L1
        self.__vmWriter.writeLabel(L2)      # lable L2
        self.__closeTag()                   # </whileStatement>

    def compileReturnNothing(self):
        """
        Compiles a 'return;' statement.
        Syntax:
        'return;'
        """
        # Compile XML
        self.__openTag('returnStatement')       # <returnStatement>
        self.__writeToken('return',             #   'return'
                          TOKEN_TYPE_KEYWORD)
        self.__writeTokenAndAdvance(';',        #   ';'
                                    TOKEN_TYPE_SYMBOL)
        self.__closeTag()                       # </returnStatement>

    def compileReturnSomething(self):
        """
        Compiles a return statement.
        Syntax:
        'return' expression? ';'
        """
        # Compile XML
        self.__openTag('returnStatement')       # <returnStatement>
        self.__writeTokenAndAdvance('return',   #   'return'
                                    TOKEN_TYPE_KEYWORD)
        self.CompileExpression()                #   expression
        self.__compileSymbol()                  #   ';'
        self.__closeTag()                       # </returnStatement>

    def compileIf(self):
        """
        Compiles an if statement, possibly with a trailing else clause.
        Syntax:
        'if' '(' expression ')' '{' statements '}' ( 'else' '{' statements
        '}' )?
        """
        L1 = self.__uniqueLabel(LABEL_1)
        L2 = self.__uniqueLabel(LABEL_2)

        self.__openTag('ifStatement')           # <ifStatement>
        self.__compileKeyWord()                 #   'if'
        self.__compileSymbol()                  #   '('
                                                # VM Code for computing ~(cond)
        self.CompileExpression()                #   expression
        self.__compileSymbol()                  #   ')'
        self.__vmWriter.writeIf(L1)             # if-goto L1
        self.__compileSymbol()                  #   '{'
                                                # VM Code for executing s1
        self.compileStatements()                #   statements
        self.__compileSymbol()                  #   '}'
        self.__vmWriter.writeGoto(L2)           # goto L2
        self.__vmWriter.writeLabel(L1)          # label L1
        if self.__tokenizer.peek() == RE_ELSE:  #
            self.__compileKeyWord()             #   'else'
            self.__compileSymbol()              #   '{'
                                                # VM Code for executing s2
            self.compileStatements()            #   statements
            self.__compileSymbol()              #   '}'
        self.__vmWriter.writeLabel(L2)          # label L2
        self.__closeTag()                       # </ifStatement>


    def CompileExpression(self):
        """
        Compiles an expression.
        Syntax:
        term (op term)*
        """
        self.__openTag('expression')        # <expression>
        self.CompileTerm()                  # term
        while self.__tokenizer.peek() in {RE_PLUS, RE_BAR, RE_ASTERISK,
                                          RE_SLASH, RE_AMPERSAND, RE_VBAR,
                                          RE_LT, RE_GT, RE_EQ}:
            symbol = self.__compileSymbol() # op
            self.CompileTerm()              # term
            self.__vmWriter.writeSymbol(symbol)
        self.__closeTag()                   # </expression>

    def CompileTerm(self):
        """
        Compiles a term.
        This routine is faced with a slight difficulty when trying to decide
        between some of the alternative parsing rules.
        Specifically, if the current token is an identifier, the routine
        must distinguish between a variable, an array entry, and a subroutine
        call. A single look-ahead token, which may be one
        of "[", "(", or "." suffices to distinguish between the three
        possibilities. Any other token is not part of this term and should
        not be advanced over.
        Syntax:
        integerConstant | stringConstant | keywordConstant | varName |
        varName '[' expression ']' | subroutineCall | '(' expression ')' |
        unaryOp term
        """
        self.__openTag('term')                      # <term>
        lookahead = self.__tokenizer.lookahead()
        if self.__tokenizer.peek() == RE_BRACKETS_LEFT:
            self.__compileSymbol()                  #   '('
            self.CompileExpression()                #   expression
            self.__compileSymbol()                  #   ')'
        elif self.__tokenizer.peek() in {RE_TILDA, RE_BAR}:
            self.__compileSymbol()                  #   unaryOp
            self.CompileTerm()                      #   term
        elif lookahead == RE_BRACKETS_SQUARE_LEFT:
            self.__compileVarName()                 #   varName
            self.__compileSymbol()                  #   '['
            self.CompileExpression()                #   expression
            self.__compileSymbol()                  #   ']'
        elif lookahead == RE_BRACKETS_LEFT:
            self.__compileSubroutineCall()          #   subroutineCall
        elif lookahead == RE_DOT:
            self.__compileVarName()                 #   varName
            self.__compileSymbol()                  #   '.'
            self.__compileSubroutineCall()          #   subroutineCall
        else:
            if self.__tokenizer.tokenType() == TOKEN_TYPE_INTEGER:
                self.__compileIntVal()              #   integerConstant
            elif self.__tokenizer.tokenType() == TOKEN_TYPE_STRING:
                self.__compileStringVal()           #   stringConstant
            elif self.__tokenizer.tokenType() == TOKEN_TYPE_KEYWORD:
                self.__compileKeyWord()             #   keywordConstant
            elif self.__tokenizer.tokenType() == TOKEN_TYPE_IDENTIFIER:
                self.__compileIdentifier()
            elif self.__tokenizer.tokenType() == TOKEN_TYPE_STRING:
                self.__compileStringVal()
            elif self.__tokenizer.peek() == RE_BRACKETS_LEFT:
                self.__compileSymbol()              #   '('
                self.CompileExpression()            #   expression
                self.__compileSymbol()              #   ')'
        self.__closeTag()                           # </term>

    def CompileExpressionList(self):
        """
        Compiles a (possibly empty) comma-separated list of expressions.
        Syntax:
        (expression (',' expression)* )?
        """
        exp_count = 0
        self.__openTag('expressionList')            # <expressionList>
        if self.__tokenizer.peek() != RE_BRACKETS_RIGHT:
            self.CompileExpression()
            exp_count += 1                          #   expression
            while self.__tokenizer.peek() == RE_COMMA:
                self.__compileSymbol()              #   ','
                self.CompileExpression()
                exp_count += 1
        self.__closeTag()                           # </expressionList>
        return exp_count

def main():
    with open("testing\Square\SquareGame.jack", 'r') as infile, \
            open("testing\Square\SquareGame.test.xml", 'w') as \
                    outfile:
        cybermaster = CompilationEngine(infile, outxml, outvm)
        cybermaster.compileClass()


if __name__ == '__main__':
    main()
